package mov;

// This file is generated. Do not edit it directly.
// Generated by GenerateAST.java

import java.util.List;

abstract class MovExpr {
  interface Visitor<R> {
    R visitAssignMovExpr(Assign movexpr);
    R visitBinaryMovExpr(Binary movexpr);
    R visitCallMovExpr(Call movexpr);
    R visitGetMovExpr(Get movexpr);
    R visitGroupingMovExpr(Grouping movexpr);
    R visitLiteralMovExpr(Literal movexpr);
    R visitLogicalMovExpr(Logical movexpr);
    R visitSetMovExpr(Set movexpr);
    R visitSuperMovExpr(Super movexpr);
    R visitThisMovExpr(This movexpr);
    R visitUnaryMovExpr(Unary movexpr);
    R visitVariableMovExpr(Variable movexpr);
  }
  static class Assign extends MovExpr {
    Assign(MovToken name, MovExpr value) {
      this.name = name;
      this.value = value;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitAssignMovExpr(this);
    }

    final MovToken name;
    final MovExpr value;

    @Override
    public String toString() {
      return "Assign(" + name + ", " + value + ")";
    }
  }
  static class Binary extends MovExpr {
    Binary(MovExpr left, MovToken operator, MovExpr right) {
      this.left = left;
      this.operator = operator;
      this.right = right;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitBinaryMovExpr(this);
    }

    final MovExpr left;
    final MovToken operator;
    final MovExpr right;

    @Override
    public String toString() {
      return "Binary(" + left + ", " + operator + ", " + right + ")";
    }
  }
  static class Call extends MovExpr {
    Call(MovExpr callee, MovToken paren, List<MovExpr> arguments) {
      this.callee = callee;
      this.paren = paren;
      this.arguments = arguments;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitCallMovExpr(this);
    }

    final MovExpr callee;
    final MovToken paren;
    final List<MovExpr> arguments;

    @Override
    public String toString() {
      return "Call(" + callee + ", " + paren + ", " + arguments + ")";
    }
  }
  static class Get extends MovExpr {
    Get(MovExpr object, MovToken name) {
      this.object = object;
      this.name = name;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitGetMovExpr(this);
    }

    final MovExpr object;
    final MovToken name;

    @Override
    public String toString() {
      return "Get(" + object + ", " + name + ")";
    }
  }
  static class Grouping extends MovExpr {
    Grouping(MovExpr expression) {
      this.expression = expression;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitGroupingMovExpr(this);
    }

    final MovExpr expression;

    @Override
    public String toString() {
      return "Grouping(" + expression + ")";
    }
  }
  static class Literal extends MovExpr {
    Literal(Object value) {
      this.value = value;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitLiteralMovExpr(this);
    }

    final Object value;

    @Override
    public String toString() {
      return "Literal(" + value + ")";
    }
  }
  static class Logical extends MovExpr {
    Logical(MovExpr left, MovToken operator, MovExpr right) {
      this.left = left;
      this.operator = operator;
      this.right = right;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitLogicalMovExpr(this);
    }

    final MovExpr left;
    final MovToken operator;
    final MovExpr right;

    @Override
    public String toString() {
      return "Logical(" + left + ", " + operator + ", " + right + ")";
    }
  }
  static class Set extends MovExpr {
    Set(MovExpr object, MovToken name, MovExpr value) {
      this.object = object;
      this.name = name;
      this.value = value;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitSetMovExpr(this);
    }

    final MovExpr object;
    final MovToken name;
    final MovExpr value;

    @Override
    public String toString() {
      return "Set(" + object + ", " + name + ", " + value + ")";
    }
  }
  static class Super extends MovExpr {
    Super(MovToken keyword, MovToken method) {
      this.keyword = keyword;
      this.method = method;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitSuperMovExpr(this);
    }

    final MovToken keyword;
    final MovToken method;

    @Override
    public String toString() {
      return "Super(" + keyword + ", " + method + ")";
    }
  }
  static class This extends MovExpr {
    This(MovToken keyword) {
      this.keyword = keyword;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitThisMovExpr(this);
    }

    final MovToken keyword;

    @Override
    public String toString() {
      return "This(" + keyword + ")";
    }
  }
  static class Unary extends MovExpr {
    Unary(MovToken operator, MovExpr right) {
      this.operator = operator;
      this.right = right;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitUnaryMovExpr(this);
    }

    final MovToken operator;
    final MovExpr right;

    @Override
    public String toString() {
      return "Unary(" + operator + ", " + right + ")";
    }
  }
  static class Variable extends MovExpr {
    Variable(MovToken name) {
      this.name = name;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitVariableMovExpr(this);
    }

    final MovToken name;

    @Override
    public String toString() {
      return "Variable(" + name + ")";
    }
  }

  abstract <R> R accept(Visitor<R> visitor);
}
