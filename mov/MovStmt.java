package mov;

// This file is generated. Do not edit it directly.
// Generated by GenerateAST.java

import java.util.List;

abstract class MovStmt {
  interface Visitor<R> {
    R visitFindMovStmt(Find movstmt);
    R visitHaveMovStmt(Have movstmt);
    R visitSayMovStmt(Say movstmt);
    R visitWriteMovStmt(Write movstmt);
    R visitWhereMovStmt(Where movstmt);
    R visitWithoutMovStmt(Without movstmt);
    R visitIsMovStmt(Is movstmt);
    R visitForMovStmt(For movstmt);
    R visitInMovStmt(In movstmt);
    R visitOfMovStmt(Of movstmt);
    R visitWithMovStmt(With movstmt);
    R visitStarringMovStmt(Starring movstmt);
    R visitDirectedByMovStmt(DirectedBy movstmt);
    R visitKindMovStmt(Kind movstmt);
  }
  static class Find extends MovStmt {
    Find(MovToken keyword, MovExpr query, MovToken semicolon) {
      this.keyword = keyword;
      this.query = query;
      this.semicolon = semicolon;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitFindMovStmt(this);
    }

    final MovToken keyword;
    final MovExpr query;
    final MovToken semicolon;

    @Override
    public String toString() {
      return "Find(" + keyword + ", " + query + ", " + semicolon + ")";
    }
  }
  static class Have extends MovStmt {
    Have(MovToken keyword, MovExpr query, MovToken semicolon) {
      this.keyword = keyword;
      this.query = query;
      this.semicolon = semicolon;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitHaveMovStmt(this);
    }

    final MovToken keyword;
    final MovExpr query;
    final MovToken semicolon;

    @Override
    public String toString() {
      return "Have(" + keyword + ", " + query + ", " + semicolon + ")";
    }
  }
  static class Say extends MovStmt {
    Say(MovToken keyword, MovExpr expression, MovToken semicolon) {
      this.keyword = keyword;
      this.expression = expression;
      this.semicolon = semicolon;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitSayMovStmt(this);
    }

    final MovToken keyword;
    final MovExpr expression;
    final MovToken semicolon;

    @Override
    public String toString() {
      return "Say(" + keyword + ", " + expression + ", " + semicolon + ")";
    }
  }
  static class Write extends MovStmt {
    Write(MovToken keyword, MovExpr expression, MovToken semicolon) {
      this.keyword = keyword;
      this.expression = expression;
      this.semicolon = semicolon;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitWriteMovStmt(this);
    }

    final MovToken keyword;
    final MovExpr expression;
    final MovToken semicolon;

    @Override
    public String toString() {
      return "Write(" + keyword + ", " + expression + ", " + semicolon + ")";
    }
  }
  static class Where extends MovStmt {
    Where(MovToken keyword, MovExpr condition, MovToken semicolon) {
      this.keyword = keyword;
      this.condition = condition;
      this.semicolon = semicolon;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitWhereMovStmt(this);
    }

    final MovToken keyword;
    final MovExpr condition;
    final MovToken semicolon;

    @Override
    public String toString() {
      return "Where(" + keyword + ", " + condition + ", " + semicolon + ")";
    }
  }
  static class Without extends MovStmt {
    Without(MovToken keyword, MovExpr condition, MovToken semicolon) {
      this.keyword = keyword;
      this.condition = condition;
      this.semicolon = semicolon;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitWithoutMovStmt(this);
    }

    final MovToken keyword;
    final MovExpr condition;
    final MovToken semicolon;

    @Override
    public String toString() {
      return "Without(" + keyword + ", " + condition + ", " + semicolon + ")";
    }
  }
  static class Is extends MovStmt {
    Is(MovToken keyword, MovExpr condition, MovToken semicolon) {
      this.keyword = keyword;
      this.condition = condition;
      this.semicolon = semicolon;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitIsMovStmt(this);
    }

    final MovToken keyword;
    final MovExpr condition;
    final MovToken semicolon;

    @Override
    public String toString() {
      return "Is(" + keyword + ", " + condition + ", " + semicolon + ")";
    }
  }
  static class For extends MovStmt {
    For(MovToken keyword, MovToken name, MovExpr iterable, List<MovStmt> body) {
      this.keyword = keyword;
      this.name = name;
      this.iterable = iterable;
      this.body = body;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitForMovStmt(this);
    }

    final MovToken keyword;
    final MovToken name;
    final MovExpr iterable;
    final List<MovStmt> body;

    @Override
    public String toString() {
      return "For(" + keyword + ", " + name + ", " + iterable + ", " + body + ")";
    }
  }
  static class In extends MovStmt {
    In(MovToken keyword, MovToken name, MovExpr iterable, List<MovStmt> body) {
      this.keyword = keyword;
      this.name = name;
      this.iterable = iterable;
      this.body = body;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitInMovStmt(this);
    }

    final MovToken keyword;
    final MovToken name;
    final MovExpr iterable;
    final List<MovStmt> body;

    @Override
    public String toString() {
      return "In(" + keyword + ", " + name + ", " + iterable + ", " + body + ")";
    }
  }
  static class Of extends MovStmt {
    Of(MovToken keyword, MovToken name, MovExpr iterable, List<MovStmt> body) {
      this.keyword = keyword;
      this.name = name;
      this.iterable = iterable;
      this.body = body;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitOfMovStmt(this);
    }

    final MovToken keyword;
    final MovToken name;
    final MovExpr iterable;
    final List<MovStmt> body;

    @Override
    public String toString() {
      return "Of(" + keyword + ", " + name + ", " + iterable + ", " + body + ")";
    }
  }
  static class With extends MovStmt {
    With(MovToken keyword, MovToken name, MovExpr iterable, List<MovStmt> body) {
      this.keyword = keyword;
      this.name = name;
      this.iterable = iterable;
      this.body = body;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitWithMovStmt(this);
    }

    final MovToken keyword;
    final MovToken name;
    final MovExpr iterable;
    final List<MovStmt> body;

    @Override
    public String toString() {
      return "With(" + keyword + ", " + name + ", " + iterable + ", " + body + ")";
    }
  }
  static class Starring extends MovStmt {
    Starring(MovToken keyword, MovExpr expression, MovToken semicolon) {
      this.keyword = keyword;
      this.expression = expression;
      this.semicolon = semicolon;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitStarringMovStmt(this);
    }

    final MovToken keyword;
    final MovExpr expression;
    final MovToken semicolon;

    @Override
    public String toString() {
      return "Starring(" + keyword + ", " + expression + ", " + semicolon + ")";
    }
  }
  static class DirectedBy extends MovStmt {
    DirectedBy(MovToken keyword, MovExpr expression, MovToken semicolon) {
      this.keyword = keyword;
      this.expression = expression;
      this.semicolon = semicolon;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitDirectedByMovStmt(this);
    }

    final MovToken keyword;
    final MovExpr expression;
    final MovToken semicolon;

    @Override
    public String toString() {
      return "DirectedBy(" + keyword + ", " + expression + ", " + semicolon + ")";
    }
  }
  static class Kind extends MovStmt {
    Kind(MovToken kind, MovToken name) {
      this.kind = kind;
      this.name = name;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitKindMovStmt(this);
    }

    final MovToken kind;
    final MovToken name;

    @Override
    public String toString() {
      return "Kind(" + kind + ", " + name + ")";
    }
  }

  abstract <R> R accept(Visitor<R> visitor);
}
