package mov;

// This file is generated. Do not edit it directly.
// Generated by GenerateAST.java

import java.util.List;

abstract class MovStmt {
  interface Visitor<R> {
    R visitFindMovStmt(Find movstmt);
    R visitWriteMovStmt(Write movstmt);
    R visitHaveMovStmt(Have movstmt);
    R visitSayMovStmt(Say movstmt);
  }
  static class Find extends MovStmt {
    Find(MovToken keyword1, MovToken kind, MovToken keyword2, MovToken literal) {
      this.keyword1 = keyword1;
      this.kind = kind;
      this.keyword2 = keyword2;
      this.literal = literal;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitFindMovStmt(this);
    }

    final MovToken keyword1;
    final MovToken kind;
    final MovToken keyword2;
    final MovToken literal;

    @Override
    public String toString() {
      return "Find(" + keyword1 + ", " + kind + ", " + keyword2 + ", " + literal + ")";
    }
  }
  static class Write extends MovStmt {
    Write(MovToken keyword1, MovToken kind, MovToken keyword2, MovToken literal) {
      this.keyword1 = keyword1;
      this.kind = kind;
      this.keyword2 = keyword2;
      this.literal = literal;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitWriteMovStmt(this);
    }

    final MovToken keyword1;
    final MovToken kind;
    final MovToken keyword2;
    final MovToken literal;

    @Override
    public String toString() {
      return "Write(" + keyword1 + ", " + kind + ", " + keyword2 + ", " + literal + ")";
    }
  }
  static class Have extends MovStmt {
    Have(MovToken keyword, MovToken literal, MovToken symbol, MovExpr expression) {
      this.keyword = keyword;
      this.literal = literal;
      this.symbol = symbol;
      this.expression = expression;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitHaveMovStmt(this);
    }

    final MovToken keyword;
    final MovToken literal;
    final MovToken symbol;
    final MovExpr expression;

    @Override
    public String toString() {
      return "Have(" + keyword + ", " + literal + ", " + symbol + ", " + expression + ")";
    }
  }
  static class Say extends MovStmt {
    Say(MovToken keyword, MovToken literal1, MovToken kind, MovToken literal2) {
      this.keyword = keyword;
      this.literal1 = literal1;
      this.kind = kind;
      this.literal2 = literal2;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitSayMovStmt(this);
    }

    final MovToken keyword;
    final MovToken literal1;
    final MovToken kind;
    final MovToken literal2;

    @Override
    public String toString() {
      return "Say(" + keyword + ", " + literal1 + ", " + kind + ", " + literal2 + ")";
    }
  }

  abstract <R> R accept(Visitor<R> visitor);
}
