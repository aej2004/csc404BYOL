package mov;

// This file is generated. Do not edit it directly.
// Generated by GenerateAST.java

import java.util.List;

abstract class MovCond {
  interface Visitor<R> {
    R visitNegCMovCond(NegC movcond);
    R visitStrCMovCond(StrC movcond);
    R visitKindCMovCond(KindC movcond);
    R visitLtCMovCond(LtC movcond);
    R visitWhereCMovCond(WhereC movcond);
    R visitWithoutCMovCond(WithoutC movcond);
  }
  static class NegC extends MovCond {
    NegC(Condition condition) {
      this.condition = condition;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitNegCMovCond(this);
    }

    final Condition condition;

    @Override
    public String toString() {
      return "NegC(" + condition + ")";
    }
  }
  static class StrC extends MovCond {
    StrC(String str) {
      this.str = str;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitStrCMovCond(this);
    }

    final String str;

    @Override
    public String toString() {
      return "StrC(" + str + ")";
    }
  }
  static class KindC extends MovCond {
    KindC(Kind kind, String str) {
      this.kind = kind;
      this.str = str;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitKindCMovCond(this);
    }

    final Kind kind;
    final String str;

    @Override
    public String toString() {
      return "KindC(" + kind + ", " + str + ")";
    }
  }
  static class LtC extends MovCond {
    LtC(Condition left, Condition right, MovToken operator) {
      this.left = left;
      this.right = right;
      this.operator = operator;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitLtCMovCond(this);
    }

    final Condition left;
    final Condition right;
    final MovToken operator;

    @Override
    public String toString() {
      return "LtC(" + left + ", " + right + ", " + operator + ")";
    }
  }
  static class WhereC extends MovCond {
    WhereC(Kind kind, Query query, MovToken identifier) {
      this.kind = kind;
      this.query = query;
      this.identifier = identifier;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitWhereCMovCond(this);
    }

    final Kind kind;
    final Query query;
    final MovToken identifier;

    @Override
    public String toString() {
      return "WhereC(" + kind + ", " + query + ", " + identifier + ")";
    }
  }
  static class WithoutC extends MovCond {
    WithoutC(Kind kind, Query query, MovToken identifier) {
      this.kind = kind;
      this.query = query;
      this.identifier = identifier;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitWithoutCMovCond(this);
    }

    final Kind kind;
    final Query query;
    final MovToken identifier;

    @Override
    public String toString() {
      return "WithoutC(" + kind + ", " + query + ", " + identifier + ")";
    }
  }

  abstract <R> R accept(Visitor<R> visitor);
}
