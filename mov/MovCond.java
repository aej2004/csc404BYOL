package mov;

// This file is generated. Do not edit it directly.
// Generated by GenerateAST.java

abstract class MovCond{
  interface Visitor<R> {
    R visitNegCMovCond(NegC movcond);
    R visitStrCMovCond(StrC movcond);
    R visitKindCMovCond(KindC movcond);
    R visitLtCMovCond(LtC movcond);
  }
  static class NegC extends MovCond {
    NegC(MovCond condition) {
      this.condition = condition;
    }
    final MovCond condition;

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitNegCMovCond(this);
    }

    @Override
    public String toString() {
      return "NegC(" + condition + ")";
    }
  }
  static class StrC extends MovCond {
    final String str;
    final Kind kind;
    StrC(String str, Kind kind) {
      this.str = str;
      this.kind = kind;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitStrCMovCond(this);
    }

    @Override
    public String toString() {
      return "StrC(" + str + ", " + kind + ")";
    }
  }
  static class KindC extends MovCond {
    final Kind kind;
    final Query query;
    final String str;
    KindC(Kind kind, Query query, String str) {
      this.kind = kind;
      this.query = query;
      this.str = str;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitKindCMovCond(this);
    }

    @Override
    public String toString() {
      return "KindC(" + kind + ", " + query + ", " + str + ")";
    }
  }
  static class LtC extends MovCond {
    final MovCond left;
    final MovCond right;
    final MovToken operator;
  
    LtC(MovCond left, MovCond right, MovToken operator) {
      this.left = left;
      this.right = right;
      this.operator = operator;
    }

    @Override
    <R> R accept(Visitor<R> visitor) {
      return visitor.visitLtCMovCond(this);
    }

    @Override
    public String toString() {
      return "LtC(" + left + ", " + right + ", " + operator + ")";
    }
  }

  abstract <R> R accept(Visitor<R> visitor);
}