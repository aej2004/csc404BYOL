package tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {
    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: GenerateAST <output directory>");
            System.exit(64);
        }
        String outputDir = args[0];

        defineAst(outputDir, "MovExpr", Arrays.asList(
                "Assign     : MovToken name, MovExpr value",
                "Binary     : MovExpr left, MovToken operator, MovExpr right",
                "Call       : MovExpr callee, MovToken paren," + " List<MovExpr> arguments",
                "Get        : MovExpr object, MovToken name",
                "Grouping   : MovExpr expression",
                "Literal    : Object value",
                "Logical    : MovExpr left, MovToken operator, MovExpr right",
                "Set        : MovExpr object, MovToken name, MovExpr value",
                "Super      : MovToken keyword, MovToken method",
                "This       : MovToken keyword",
                "Unary      : MovToken operator, MovExpr right",
                "Variable   : MovToken name"
        ));

        defineAst(outputDir, "MovStmt", Arrays.asList(
                "Find       : MovToken keyword, MovExpr query, MovToken semicolon",
                "Have       : MovToken keyword, MovExpr query, MovToken semicolon",
                "Say        : MovToken keyword, MovExpr expression, MovToken semicolon",
                "Write      : MovToken keyword, MovExpr expression, MovToken semicolon",
                "Where     : MovToken keyword, MovExpr condition, MovToken semicolon",
                "Without   : MovToken keyword, MovExpr condition, MovToken semicolon",
                "Is       : MovToken keyword, MovExpr condition, MovToken semicolon",
                "For        : MovToken keyword, MovToken name, MovExpr iterable, List<MovStmt> body",
                "In       : MovToken keyword, MovToken name, MovExpr iterable, List<MovStmt> body",
                "Of       : MovToken keyword, MovToken name, MovExpr iterable, List<MovStmt> body",
                "With      : MovToken keyword, MovToken name, MovExpr iterable, List<MovStmt> body",
                "Starring  : MovToken keyword, MovExpr expression, MovToken semicolon",
                "DirectedBy: MovToken keyword, MovExpr expression, MovToken semicolon",
                "Kind      : MovToken kind, MovToken name"

        ));
    }

    private static void defineAst(
            String outputDir, String baseName, List<String> types) throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        PrintWriter writer = new PrintWriter(path);

        writer.println("package mov;");
        writer.println();
        writer.println("// This file is generated. Do not edit it directly.");
        writer.println("// Generated by GenerateAST.java");
        writer.println();
        writer.println("import java.util.List;");
        writer.println();
        writer.println("abstract class " + baseName + " {");

        defineVisitor(writer, baseName, types);

        // The AST classes.
        for (String type : types) {
            String className = type.split(":")[0].trim();
            String fields = "";
            if (type.split(":").length > 1) { fields = type.split(":")[1].trim(); }
            defineType(writer, baseName, className, fields);
        }

        // The base accept() method
        writer.println();
        writer.println("  abstract <R> R accept(Visitor<R> visitor);");

        writer.println("}");
        writer.close();
    }

    private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {
        writer.println("  interface Visitor<R> {");

        for (String type: types) {
            String typeName = type.split(":")[0].trim();
            writer.println("    R visit" + typeName + baseName + "(" + typeName + " " + baseName.toLowerCase() + ");");
        }

        writer.println("  }");
    }
        

    private static void defineType(PrintWriter writer, String baseName, String className, String fieldList) {
        writer.println("  static class " + className + " extends " + baseName + " {");

        // Constructor.
        writer.print("    " + className + "(");
        String[] fields = fieldList.split(", ");
        System.out.println("fields: " + Arrays.toString(fields) + " | " + fields.length);
        
        for (int i = 0; i < fields.length; i++) {
            if (fields[i].equals("")) { continue; }
            String[] parts = fields[i].trim().split(" ");
            String name = parts[1];
            writer.print(parts[0] + " " + name);
            if (i < fields.length - 1) {
                writer.print(", ");
            }
        }
        writer.println(") {");

        // Store parameters in fields.
        for (String field : fields) {
            if (field.equals("")) { continue; }
            String[] parts = field.trim().split(" ");
            String name = parts[1];
            writer.println("      this." + name + " = " + name + ";");
        }
        writer.println("    }");

        // Visitor pattern.
        writer.println();
        writer.println("    @Override");
        writer.println("    <R> R accept(Visitor<R> visitor) {");
        writer.println("      return visitor.visit" + className + baseName + "(this);");
        writer.println("    }");
        writer.println();

        // Fields.
        for (String field : fields) {
            if (field.equals("")) { continue; }
            writer.println("    final " + field.trim() + ";");
        }

        writer.println();
        writer.println("    @Override");
        writer.println("    public String toString() {");
        // implement a toString() method that returns the class name and the fields
        writer.print("      return \"" + className + "(\"");
        for (int i = 0; i < fields.length; i++) {
            if (fields[i].equals("")) { writer.print(" + "); continue; }
            String[] parts = fields[i].trim().split(" ");
            String name = parts[1];
            writer.print(" + " + name + " + ");
            if (i < fields.length - 1) {
                writer.print("\", \"");
            }
        }
        writer.println("\")\";");
        writer.println("    }");
        writer.println("  }");
    }
}